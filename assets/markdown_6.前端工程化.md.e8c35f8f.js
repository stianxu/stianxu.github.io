import{_ as l,c as s,o as a,a as e}from"./app.3074115f.js";const h=JSON.parse('{"title":"前端工程化","description":"","frontmatter":{},"headers":[{"level":2,"title":"git 命令","slug":"git-命令","link":"#git-命令","children":[]},{"level":2,"title":"git pull 和 git fetch 的区别","slug":"git-pull-和-git-fetch-的区别","link":"#git-pull-和-git-fetch-的区别","children":[]},{"level":2,"title":"git rebase 和 git merge 的区别","slug":"git-rebase-和-git-merge-的区别","link":"#git-rebase-和-git-merge-的区别","children":[]},{"level":2,"title":"有哪些常⻅的 Loader","slug":"有哪些常⻅的-loader","link":"#有哪些常⻅的-loader","children":[]},{"level":2,"title":"有哪些常⻅的 Plugin","slug":"有哪些常⻅的-plugin","link":"#有哪些常⻅的-plugin","children":[]},{"level":2,"title":"bundle，module 是什么","slug":"bundle-module-是什么","link":"#bundle-module-是什么","children":[]},{"level":2,"title":"Loader 和 Plugin 的不同","slug":"loader-和-plugin-的不同","link":"#loader-和-plugin-的不同","children":[]}],"relativePath":"markdown/6.前端工程化.md"}'),n={name:"markdown/6.前端工程化.md"},o=e(`<h1 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a></h1><h2 id="git-命令" tabindex="-1">git 命令 <a class="header-anchor" href="#git-命令" aria-hidden="true">#</a></h2><ul><li><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;">                     </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">新建</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">代码库</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;">                      </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">添加指定文件到暂存区</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;">                       </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">删除工作区文件，并且将这次删除放入暂存区</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">提交暂存区到仓库区</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;">                   </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">列出所有分支</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">branch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">     </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">新建一个分支，并切换到该分支</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">status</span><span style="color:#A6ACCD;">                   </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">显示有变更文件的状态</span></span>
<span class="line"></span></code></pre></div></li></ul><h2 id="git-pull-和-git-fetch-的区别" tabindex="-1">git pull 和 git fetch 的区别 <a class="header-anchor" href="#git-pull-和-git-fetch-的区别" aria-hidden="true">#</a></h2><ul><li>git fetch 只是将远程仓库的变化下载下来，并没有和本地分支合并。</li><li>git pull 会将远程仓库的变化下载下来，并和当前分支合并。</li></ul><h2 id="git-rebase-和-git-merge-的区别" tabindex="-1">git rebase 和 git merge 的区别 <a class="header-anchor" href="#git-rebase-和-git-merge-的区别" aria-hidden="true">#</a></h2><ul><li><p>git merge 和 git rebase 都是用于分支合并，关键<strong>在</strong> <strong>commit 记录的处理上不同</strong></p><ul><li><p>git merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会保留之前每个分支的 commit 历史。</p></li><li><p>git rebase 会先找到两个分支的第一个共同的 commit 祖先记录，然后将提取当前分支这之后的所有 commit 记录，然后将这个 commit 记录添加到目标分支的最新提交后面。经过这个合并后，两个分支合并后的 commit 记录就变为了线性的记录了。</p></li></ul></li></ul><h2 id="有哪些常⻅的-loader" tabindex="-1">有哪些常⻅的 <strong>Loader</strong> <a class="header-anchor" href="#有哪些常⻅的-loader" aria-hidden="true">#</a></h2><p><strong>常见 Loader</strong></p><ul><li>image-loader：加载并且压缩图⽚⽂件。</li><li>babel-loader：把 ES6 转换成 ES5。</li><li>css-loader：加载 CSS，⽀持模块化、压缩、⽂件导⼊等特性。</li><li>style-loader：把 CSS 代码注⼊到 JavaScript 中，通过 DOM 操作去加载 CSS。</li><li>eslint-loader：通过 ESLint 检查 JavaScript 代码。</li></ul><p><strong>注意点</strong></p><ul><li>在 Webpack 中，loader 的执行顺序是<strong>从右向左</strong>执行的。因为 webpack 选择了<strong>compose 这样的函数式编程方式</strong>，这种方式的表达式执行是从右向左的。</li></ul><h2 id="有哪些常⻅的-plugin" tabindex="-1">有哪些常⻅的 <strong>Plugin</strong> <a class="header-anchor" href="#有哪些常⻅的-plugin" aria-hidden="true">#</a></h2><ul><li>define-plugin：定义环境变量。</li><li>html-webpack-plugin：简化 html ⽂件创建。</li><li>uglifyjs-webpack-plugin：通过 UglifyES 压缩 ES6 代码。</li><li>webpack-parallel-uglify-plugin: 多核压缩，提⾼压缩速度。</li><li>webpack-bundle-analyzer: 可视化 webpack 输出⽂件的体积。</li><li>mini-css-extract-plugin: CSS 提取到单独的⽂件中，⽀持按需加载。</li></ul><h2 id="bundle-module-是什么" tabindex="-1"><strong>bundle</strong>，module 是什么 <a class="header-anchor" href="#bundle-module-是什么" aria-hidden="true">#</a></h2><ul><li>bundle：是由webpack打包出来的⽂件。</li><li>module：是开发中的单个模块，在webpack的世界，⼀切皆模块，⼀个模块对应⼀个⽂件。</li></ul><h2 id="loader-和-plugin-的不同" tabindex="-1">Loader 和 Plugin 的不同 <a class="header-anchor" href="#loader-和-plugin-的不同" aria-hidden="true">#</a></h2><p><strong>不同的作⽤</strong></p><ul><li>Loader 直译为&quot;加载器&quot;。Webpack 将⼀切⽂件视为模块，但是 webpack 原⽣是只能解析 js ⽂件，如果想将其他⽂件也打包的话，就会⽤到 loader 。 所以 Loader 的作⽤是让 webpack 拥有了加载和解析⾮ JavaScript ⽂件的能⼒。</li><li>Plugin 直译为&quot;插件&quot;。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。 在 Webpack 运⾏的⽣命周期中会⼴播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li></ul><p><strong>不同的⽤法</strong></p><ul><li>Loader 在 module.rules 中配置，也就是说他作为模块的解析规则⽽存在。 类型为数组，每⼀项都是⼀个 Object ，⾥⾯描述了对于什么类型的⽂件（ test ），使⽤什么加载( loader )和使⽤的参数（ options ）</li><li>Plugin 在 plugins 中单独配置。 类型为数组，每⼀项是⼀个 plugin 的实例，参数都通过构造函数传⼊。</li></ul>`,21),t=[o];function p(i,r,c,g,d,u){return a(),s("div",null,t)}const y=l(n,[["render",p]]);export{h as __pageData,y as default};
